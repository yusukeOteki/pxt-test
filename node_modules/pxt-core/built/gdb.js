"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var nodeutil = require("./nodeutil");
var child_process = require("child_process");
var fs = require("fs");
var buildengine = require("./buildengine");
var U = pxt.Util;
function fatal(msg) {
    U.userError(msg);
}
function getOpenOcdPath(cmds) {
    if (cmds === void 0) { cmds = ""; }
    function latest(tool) {
        var dir = path.join(pkgDir, "tools/", tool, "/");
        if (!fs.existsSync(dir))
            fatal(dir + " doesn't exists; " + tool + " not installed in Arduino?");
        var subdirs = fs.readdirSync(dir);
        if (!subdirs.length)
            fatal("no sub-directories in " + dir);
        subdirs.sort(pxt.semver.strcmp);
        subdirs.reverse();
        var thePath = path.join(dir, subdirs[0], "/");
        if (!fs.existsSync(thePath + "bin"))
            fatal("missing bindir in " + thePath);
        return thePath;
    }
    var dirs = [
        process.env["HOME"] + "/Library/Arduino",
        process.env["USERPROFILE"] + "/AppData/Local/Arduino",
        process.env["HOME"] + "/.arduino",
    ];
    var pkgDir = "";
    var openocdPath = "";
    var openocdBin = "";
    var gccPath = "";
    var gdbBin = "";
    if (fs.existsSync("/usr/bin/openocd")) {
        openocdPath = "/usr/";
        gccPath = "/usr/";
    }
    else {
        for (var ardV = 15; ardV < 50; ++ardV) {
            for (var _i = 0, dirs_1 = dirs; _i < dirs_1.length; _i++) {
                var d = dirs_1[_i];
                pkgDir = path.join(d + ardV, "/packages/arduino/");
                if (fs.existsSync(pkgDir))
                    break;
                pkgDir = "";
            }
            if (pkgDir)
                break;
        }
        if (!pkgDir)
            fatal("cannot find Arduino packages directory");
        openocdPath = latest("openocd");
        gccPath = latest("arm-none-eabi-gcc");
    }
    openocdBin = path.join(openocdPath, "bin/openocd");
    if (process.platform == "win32")
        openocdBin += ".exe";
    var script = pxt.appTarget.compile.openocdScript;
    if (!script)
        fatal("no openocdScript in pxtarget.json");
    if (!cmds)
        cmds = "\ngdb_port pipe\ngdb_memory_map disable\n\n$_TARGETNAME configure -event gdb-attach {\n    echo \"Halting target\"\n    halt\n}\n\n$_TARGETNAME configure -event gdb-detach {\n    echo \"Resetting target\"\n    reset\n}";
    fs.writeFileSync("built/debug.cfg", "\nlog_output built/openocd.log\n" + script + "\n" + cmds + "\n");
    var args = [openocdBin, "-d2",
        "-s", path.join(openocdPath, "share/openocd/scripts/"),
        "-f", "built/debug.cfg"];
    gdbBin = path.join(gccPath, "bin/arm-none-eabi-gdb");
    if (process.platform == "win32")
        gdbBin += ".exe";
    return { args: args, gdbBin: gdbBin };
}
function codalBin() {
    var cs = pxt.appTarget.compileService;
    return cs.codalBinary ?
        buildengine.thisBuild.buildPath + "/build/" + cs.codalBinary :
        "built/yt/build/" + cs.yottaTarget + "/source/" + cs.yottaBinary.replace(/\.hex$/, "").replace(/-combined$/, "");
}
function dumplogAsync() {
    return __awaiter(this, void 0, void 0, function () {
        var m, addr, logSize, toolPaths, oargs, res, buf, _i, _a, line, m_1, i;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    m = /0x0000000([0-9a-f]+)\s+codalLogStore\s*$/m.exec(fs.readFileSync(codalBin() + ".map", "utf8"));
                    if (!m)
                        fatal("Can't find codalLogStore symbol in map");
                    addr = parseInt(m[1], 16) + 4;
                    logSize = 1024;
                    toolPaths = getOpenOcdPath("\ninit\nhalt\nset M(0) 0\nmem2array M 8 " + addr + " " + logSize + "\nresume\nparray M\nshutdown\n");
                    oargs = toolPaths.args;
                    return [4 /*yield*/, nodeutil.spawnWithPipeAsync({
                            cmd: oargs[0],
                            args: oargs.slice(1),
                            silent: true
                        })];
                case 1:
                    res = _b.sent();
                    buf = Buffer.alloc(logSize);
                    for (_i = 0, _a = res.toString("utf8").split(/\r?\n/); _i < _a.length; _i++) {
                        line = _a[_i];
                        m_1 = /^M\((\d+)\)\s*=\s*(\d+)/.exec(line);
                        if (m_1)
                            buf[parseInt(m_1[1])] = parseInt(m_1[2]);
                    }
                    for (i = 0; i < logSize; ++i) {
                        if (buf[i] == 0) {
                            console.log("\n\n" + buf.slice(0, i).toString("utf8"));
                            break;
                        }
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.dumplogAsync = dumplogAsync;
function startAsync(gdbArgs) {
    var elfFile = codalBin();
    if (!fs.existsSync(elfFile))
        fatal("compiled file not found: " + elfFile);
    var toolPaths = getOpenOcdPath();
    var oargs = toolPaths.args;
    // use / not \ for paths on Windows; otherwise gdb has issue starting openocd
    fs.writeFileSync("built/openocd.gdb", "\ntarget remote | " + oargs.map(function (s) { return "\"" + s.replace(/\\/g, "/") + "\""; }).join(" ") + "\ndefine rst\n  set {int}(0x20008000-4) = 0xf02669ef\n  monitor reset halt\n  continue\nend\ndefine irq\n  echo \"Current IRQ: \"\n  p (*(int*)0xE000ED04 & 0x1f) - 16\nend\necho Use 'rst' command to re-run program from start (set your breakpoints first!).\\n\n");
    pxt.log("starting openocd: " + oargs.join(" "));
    var gdbargs = ["--command=built/openocd.gdb", elfFile].concat(gdbArgs);
    pxt.log("starting gdb with: " + toolPaths.gdbBin + " " + gdbargs.join(" "));
    var proc = child_process.spawn(toolPaths.gdbBin, gdbargs, {
        stdio: "inherit",
    });
    process.on('SIGINT', function () {
        // this doesn't actully kill it, it usually just stops the target program
        proc.kill('SIGINT');
    });
    return new Promise(function (resolve, reject) {
        proc.on("error", function (err) { reject(err); });
        proc.on("close", function () {
            resolve();
        });
    });
}
exports.startAsync = startAsync;
