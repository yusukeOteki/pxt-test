{
  "ArcadePhysicsEngine": "A physics engine that does simple AABB bounding box check",
  "ArcadePhysicsEngine.overlaps": "Returns sprites that overlap with the given sprite. If type is non-zero, also filter by type.",
  "ArcadePhysicsEngine.overlaps|param|sprite": "@param layer",
  "Math": "More complex operations with numbers.",
  "Math.percentChance": "Returns a random boolean that is true the given percentage of the time.",
  "Math.percentChance|param|percentage": "The percentage chance that the returned value will be true from 0 - 100",
  "Math.pickRandom": "Returns a random element from the given list",
  "Math.pickRandom|param|list": "The list to choose an element from",
  "PhysicsEngine.addSprite": "Adds sprite to the physics",
  "PhysicsEngine.collisions": "Apply collisions",
  "PhysicsEngine.move": "Apply physics",
  "Sprite": "A sprite on the screen",
  "Sprite.destroy": "Destroy the sprite",
  "Sprite.image": "Gets the current image",
  "Sprite.isHittingTile": "Check if there is an obstacle in the given direction",
  "Sprite.isOutOfScreen": "Indicates if the sprite is outside the screen",
  "Sprite.layer": "A bitset of layer. Each bit is a layer, default is 1.",
  "Sprite.lifespan": "Time to live in game ticks. The lifespan decreases by 1 on each game update\nand the sprite gets destroyed when it reaches 0.",
  "Sprite.onCollision": "Registers code when the sprite collides with an obstacle",
  "Sprite.onCollision|param|direction": "@param handler",
  "Sprite.onDestroyed": "Run code when the sprite is destroyed",
  "Sprite.onOverlap": "Registers code when the sprite overlaps with another sprite",
  "Sprite.overlapsWith": "Check if this sprite overlaps another sprite",
  "Sprite.say": "Display a speech bubble with the text, for the given time",
  "Sprite.say|param|text": "the text to say, eg: \":)\"",
  "Sprite.setFlag": "Set a sprite flag",
  "Sprite.setImage": "Sets the image on the sprite",
  "Sprite.setPosition": "Set the sprite position",
  "Sprite.setPosition|param|x": "horizontal position",
  "Sprite.setPosition|param|y": "vertical position",
  "Sprite.tileHitFrom": "Get the obstacle sprite in a given direction if any",
  "Sprite.type": "The type of sprite\n\nThe type of sprite",
  "Sprite.type@set": "The type of sprite\n\nThe type of sprite",
  "controller": "Access to game controls",
  "controller.controlSprite": "Control a sprite using the direction buttons from the controller. Note that this\ncontrol will take over the vx and vy of the sprite and overwrite any changes\nmade unless a 0 is passed.\n* @param sprite The Sprite to control",
  "controller.controlSprite|param|vx": "The velocity used for horizontal movement when left/right is pressed",
  "controller.controlSprite|param|vy": "The velocity used for vertical movement when up/down is pressed",
  "game": "Game transitions and dialog",
  "game.ask": "Prompts the user for a boolean question",
  "game.askForString": "Ask the player for a string value.",
  "game.askForString|param|answerLength": "The maximum number of characters the user can enter (1 - 24)",
  "game.askForString|param|message": "The message to display on the text-entry screen",
  "game.ask|param|title": "@param subtitle",
  "game.debug": "Determins if diagnostics are shown",
  "game.onPaint": "Draw on screen before sprites",
  "game.onUpdate": "Update the position and velocities of sprites",
  "game.onUpdateInterval": "Run code on an interval of time. This executes before game.onUpdate()",
  "game.over": "Finish the game and display the score",
  "game.setDialogCursor": "Change the default image used for the cursor that appears in the\nbottom left of the dialog box.\n* @param cursor The image to use for the cursor",
  "game.setDialogFrame": "Change the default dialog frame to a new image. Dialog frames\nare divided into three rows and three columns and are used to define\nthe outer frame of the dialog box.\n* @param frame A square image with a width and height divisible by three",
  "game.setDialogTextColor": "Change the color for the text in dialog boxes.\n* @param color The index of the color 0-15",
  "game.showLongText": "Show a long text string in a dialog box that will scroll\nusing the \"A\" or \"down\" buttons. The previous section of the\ntext is shown using the \"up\" button. This function\nhalts execution until the last page of text is dismissed.\n* @param str The text to display",
  "game.showLongText|param|layout": "The layout to use for the dialog box",
  "game.splash": "Show a title and an optional subtitle menu",
  "game.splash|param|title": "@param subtitle",
  "info": "Head-up display\n\nHead-up display",
  "info.backgroundColor": "Get the current color of the background of the score, countdown, and life\nelements",
  "info.borderColor": "Get the current color of the borders around the score, countdown, and life\nelements",
  "info.changeLifeBy": "Change the lives by the given amount",
  "info.changeLifeBy|param|value": "the change of lives, eg: -1",
  "info.changeScoreBy": "Change the score by the given amount",
  "info.changeScoreBy|param|value": "the amount of change, eg: 1",
  "info.fontColor": "Get the current color of the text usded in the score, countdown, and life\nelements",
  "info.highScore": "Get the last recorded high score",
  "info.life": "Get the number of lives",
  "info.onCountdownEnd": "Run code when the countdown reaches 0. If this function\nis not called then game.over() is called instead",
  "info.onLifeZero": "Run code when the player's life reaches 0. If this function\nis not called then game.over() is called instead",
  "info.saveHighScore": "Updates the high score based on the current score",
  "info.score": "Get the current score if any",
  "info.setBackgroundColor": "Sets the color of the background of the score, countdown, and life\nelements. Defaults to 1",
  "info.setBackgroundColor|param|color": "The index of the color (0-15)",
  "info.setBorderColor": "Sets the color of the borders around the score, countdown, and life\nelements. Defaults to 3",
  "info.setBorderColor|param|color": "The index of the color (0-15)",
  "info.setFontColor": "Sets the color of the text used in the score, countdown, and life\nelements. Defaults to 3",
  "info.setFontColor|param|color": "The index of the color (0-15)",
  "info.setLife": "Set the number of lives",
  "info.setLifeImage": "Replaces the image used to represent the player's lives. Images\nshould be no larger than 8x8",
  "info.setLife|param|value": "the number of lives, eg: 3",
  "info.setScore": "Set the score",
  "info.showCountdown": "Set whether score should be displayed",
  "info.showCountdown|param|on": "if true, score is shown; otherwise, score is hidden",
  "info.showLife": "Set whether life should be displayed",
  "info.showLife|param|on": "if true, lives are shown; otherwise, lives are hidden",
  "info.showScore": "Set whether score should be displayed",
  "info.showScore|param|on": "if true, score is shown; otherwise, score is hidden",
  "info.startCountdown": "Start a countdown of the given duration in seconds",
  "info.startCountdown|param|duration": "the duration of the countdown, eg: 10",
  "info.stopCountdown": "Stop the current countdown and hides the timer display",
  "info.updateHighScore": "Sends the current score and the new high score",
  "scene": "Control the background, tiles and camera\n\nControl the background, tiles and camera",
  "scene.addBackgroundLayer": "Adds a moving background layer",
  "scene.addBackgroundLayer|param|distance": "distance of the layer which determines how fast it moves, eg: 10",
  "scene.backgroundColor": "Get the game background color",
  "scene.backgroundImage": "Get the current background image",
  "scene.cameraFollowSprite": "Set the game camera to follow a sprite",
  "scene.centerCameraAt": "Moves the camera center to a coordinate position",
  "scene.getTile": "Get the tile at a position in the tile map",
  "scene.getTilesByType": "Get all tiles in the tile map with the given index.",
  "scene.getTile|param|col": "@param row",
  "scene.onHitTile": "Run code when a certain kind of sprite hits a tile",
  "scene.screenHeight": "Gets the height of the screen in pixels",
  "scene.screenWidth": "Get the width of the screen in pixels",
  "scene.setBackgroundColor": "Set the game background color",
  "scene.setBackgroundImage": "Set a picture as the background",
  "scene.setTile": "Set an image as a tile at the given index. Tiles should be a 16x16 image",
  "scene.setTileAt": "Set a tile at the given index",
  "scene.setTileAt|param|tile": "@param index",
  "scene.setTileMap": "Set the map for placing tiles in the scene",
  "scene.setTile|param|index": "@param img",
  "sprites": "Sprites on screen",
  "sprites.SpriteMap.neighbors": "Returns a potential list of neighbors",
  "sprites.SpriteMap.overlaps": "Gets the overlaping sprites if any",
  "sprites.SpriteMap.update": "Recompute hashes for all objects",
  "sprites._spriteType": "Gets the sprite type",
  "sprites.allOfKind": "Return an array of all sprites of the given kind.",
  "sprites.allOfKind|param|kind": "the target kind",
  "sprites.create": "Create a new sprite from an image",
  "sprites.createEmptySprite": "Creates a new sprite of the given kind and adds it to the game. Use this\nwith the \"on sprite created\" event.",
  "sprites.createEmptySprite|param|kind": "the kind of sprite to create",
  "sprites.createProjectile": "Create a new sprite with given speed, and place it at the edge of the screen so it moves towards the middle.\nThe sprite auto-destroys when it leaves the screen. You can modify position after it's created.",
  "sprites.create|param|img": "the image",
  "sprites.onCreated": "Run code when a certain kind of sprite is created",
  "sprites.onCreated|param|kind": "@param sprite",
  "sprites.onDestroyed": "Run code when a certain kind of sprite is destroyed",
  "sprites.onDestroyed|param|kind": "@param sprite",
  "sprites.onOverlap": "Run code when two kinds of sprites overlap",
  "tiles.Tile": "A tile in the tilemap",
  "tiles.Tile.place": "Center the given sprite on this tile"
}